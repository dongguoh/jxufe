/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gjx.struts.action;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.upload.FormFile;

import com.gjx.struts.form.UploadForm;
import com.gjx.util.Constants;

/**
 * MyEclipse Struts Creation date: 07-27-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/upload" name="uploadForm" scope="request"
 */
public class UploadAction extends Action {

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String dir = servlet.getServletContext().getRealPath("/upload");
		UploadForm ulf = (UploadForm) form;
		System.out.println("****** dir=" + dir);
		FormFile file = ulf.getFile();
		if(file.getFileName().length()<1){
			ActionMessages errors = new ActionMessages();
			errors.add("error", new ActionMessage("file.not.choice"));
			this.saveErrors(request, errors);
			return mapping.findForward("success");
		}
		int maxSize = file.getFileSize() / (1024 * 1024);
		int slash = file.getFileName().lastIndexOf(".") + 1;
		String suffix = file.getFileName().substring(slash);
System.out.println("*********你所上传的文件类型为 ：" + suffix);
		if (maxSize >= 1 || "exe".equalsIgnoreCase(suffix)
				|| "com".equalsIgnoreCase(suffix)
				|| "bat".equalsIgnoreCase(suffix)
				|| "dll".equalsIgnoreCase(suffix)) {
			System.out.println("*********你所上传的文件类型为 ：" + suffix
					+ "  不符全要求，请压缩后再上传");
			ActionMessages errors = new ActionMessages();
			errors.add("error", new ActionMessage("file.not.necessary"));
			this.saveErrors(request, errors);
			return mapping.findForward("success");
		}

		Calendar calendar = Calendar.getInstance();
		// 按日期时间的形式加上原来的文件的名字的方式取得要保存的文件名
		String newFileName = ""
				+ calendar.get(Calendar.YEAR)
				+ ""
				+ (calendar.get(Calendar.MONTH) + 1)
				+ ""
				+ (calendar.get(Calendar.DATE) + ""
						+ calendar.get(Calendar.HOUR) + ""
						+ calendar.get(Calendar.MINUTE) + "" + calendar
						.get(Calendar.SECOND));
		newFileName = newFileName + "." + suffix;

		String size = Integer.toString(file.getFileSize() / 1024) + " KB";

		InputStream is = null;
		OutputStream os = null;
		try {
			is = file.getInputStream();
			os = new FileOutputStream(dir + "/" + newFileName);
			int bytesRead = 0;
			byte[] buffer = new byte[8192];
			while ((bytesRead = is.read(buffer, 0, 8192)) != -1) {
				os.write(buffer, 0, bytesRead);
			}

		} catch (FileNotFoundException e) {
			System.err.println("没有找到文件夹  " + "> >" + this.getClass());
			e.printStackTrace();
		} catch (IOException e) {

			ActionMessages errors = new ActionMessages();
			errors.add("error", new ActionMessage("file.upload.error"));
			this.saveErrors(request, errors);
			return mapping.findForward("success");

		} finally {
			if (os != null) {
				try {
					os.close();
					os = null;
				} catch (IOException e) {
					System.err.println("*** 关闭数据输出流时出错 >>" + this.getClass());
					e.printStackTrace();
				}
			}
			if (is != null) {
				try {
					is.close();
					is = null;
				} catch (IOException e) {
					System.err.println("*** 关闭数据输入流时出错 >>" + this.getClass());
					e.printStackTrace();
				}
			}
		}

		ulf.setFname(newFileName);
		ulf.setFsize(size);
		HttpSession session = request.getSession();
		session.setAttribute(Constants.UPLOAD_PATH, "upload/" + newFileName);
		file.destroy();
		System.out.println("132****** dir=" + dir);
		return mapping.findForward("success");
	}
}